class EightPuzzle:
    def __init__(self, initial_state, goal_state):
        self.initial_state = initial_state
        self.goal_state = goal_state
        self.actions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

    def is_goal_state(self, state):
        return state == self.goal_state

    def get_successors(self, state):
        successors = []
        empty_tile_index = state.index(0)

        for action in self.actions:
            new_index = empty_tile_index + 3 * action[0] + action[1]

            if 0 <= new_index < 9:
                new_state = list(state)
                new_state[empty_tile_index], new_state[new_index] = new_state[new_index], new_state[empty_tile_index]
                successors.append(new_state)

        return successors

    def depth_limited_search(self, state, limit):
        if self.is_goal_state(state):
            return [state]

        if limit == 0:
            return None

        for successor in self.get_successors(state):
            result = self.depth_limited_search(successor, limit - 1)
            if result is not None:
                return [state] + result

        return None

    def iterative_deepening_search(self):
        depth_limit = 0

        while True:
            result = self.depth_limited_search(self.initial_state, depth_limit)
            if result is not None:
                return result
            depth_limit += 1


# Example usage:
initial_state = [1, 2, 3, 4, 5, 6, 0, 7, 8]
goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]

puzzle = EightPuzzle(initial_state, goal_state)
solution = puzzle.iterative_deepening_search()

if solution:
    print("Solution found:")
    for step, state in enumerate(solution):
        print(f"Step {step + 1}: {state}")
else:
    print("No solution found.")
